package breakoutplay;

import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import javax.management.monitor.CounterMonitor;
import javax.swing.JPanel;
import javax.swing.Timer;

public class Play_a extends JPanel implements KeyListener, ActionListener {

    private boolean play = false;
    private int score = 0;

    private int totalBricks = 15;

    private Timer timer;
    private final int delay = 3;

    private int playerX = 300;

    private int ballposX = 340;
    private int ballposY = 500;
    private int ballXdir = 8;
    private int ballYdir = -2;

    private MapGenerator map;

    public Play_a() {
        map = new MapGenerator(3, 5);
        addKeyListener(this);
        setFocusable(true);
        setFocusTraversalKeysEnabled(false);
        timer = new Timer(delay, this);
        timer.start();
    }

    public void paint(Graphics g) {
        g.setColor(Color.DARK_GRAY);
        g.fillRect(1, 1, 695, 595);

        map.draw((Graphics2D) g);

        g.setColor(Color.LIGHT_GRAY);
        g.fillRect(3, 3, 3, 592);
        g.fillRect(5, 3, 692, 3);
        g.fillRect(691, 10, 3, 592);

        g.setColor(Color.PINK);
        g.setFont(new Font("serif", Font.BOLD, 25));
        g.drawString("" + score, 590, 30);

        g.setColor(Color.PINK);
        g.fillRect(playerX, 550, 110, 8);

        g.setColor(Color.LIGHT_GRAY);
        g.fillOval(ballposX, ballposY, 25, 25);

        if (totalBricks <= 0) {
            play = false;
            ballXdir = 0;
            ballYdir = 0;
            g.setColor(Color.PINK);
            g.setFont(new Font("serif", Font.BOLD, 30));
            g.drawString(" مبرووك لقد فزت ", 260, 300);

            g.setColor(Color.LIGHT_GRAY);
            g.setFont(new Font("serif", Font.BOLD, 20));
            g.drawString(" اضغط  enter للعوده  ", 230, 350);
        }

        if (ballposY > 570) {
            play = false;
            ballXdir = 0;
            ballYdir = 0;
            g.setColor(Color.PINK);
            g.setFont(new Font("serif", Font.BOLD, 30));
            g.drawString("عدد نقاطك :  " + score, 260, 300);

            g.setColor(Color.LIGHT_GRAY);
            g.setFont(new Font("serif", Font.BOLD, 25));
            g.drawString("  اضغط * enter *للعوده ", 230, 350);
        }

        g.dispose();
    }

    @Override
    public void keyTyped(KeyEvent e) {
    }

    @Override
    public void keyPressed(KeyEvent e) {

        if (e.getKeyCode() == KeyEvent.VK_RIGHT) {
            if (playerX >= 600) {
                playerX = 600;
            } else {
                moveRight();
            }
        }

        if (e.getKeyCode() == KeyEvent.VK_LEFT) {
            if (playerX < 10) {
                playerX = 10;
            } else {

                moveLeft();

            }
        }

        if (!play && e.getKeyCode() == KeyEvent.VK_ENTER) {
            score = 0;

            totalBricks = 15;

            playerX = 300;

            ballposX = 340;
            ballposY = 500;
            ballXdir = 8;
            ballYdir = -2;
            map = new MapGenerator(3, 5);
           
        }
        repaint();

    }

    @Override
    public void keyReleased(KeyEvent e) {
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        timer.start();
        if (play) {
            if (new Rectangle(ballposX, ballposY, 20, 20).intersects(new Rectangle(playerX, 550, 30, 8))) {
                ballYdir = -ballYdir;
                ballXdir = -2;
            } else if (new Rectangle(ballposX, ballposY, 20, 20).intersects(new Rectangle(playerX + 70, 550, 30, 8))) {
                ballYdir = -ballYdir;
                ballXdir = ballXdir + 1;
            } else if (new Rectangle(ballposX, ballposY, 20, 20).intersects(new Rectangle(playerX + 30, 550, 40, 8))) {
                ballYdir = -ballYdir;
            }
            A:
            for (int i = 0; i < map.map.length; i++) {
                for (int j = 0; j < map.map[0].length; j++) {
                    if (map.map[i][j] > 0) {
                        int brickX = j * map.brickWidth + 80;
                        int brickY = i * map.brickHeight + 50;
                        int brickWidth = map.brickWidth;
                        int brickHeight = map.brickHeight;

                        Rectangle rect = new Rectangle(brickX, brickY, brickWidth, brickHeight);
                        Rectangle ballRect = new Rectangle(ballposX, ballposY, 20, 20);
                        Rectangle brickRect = rect;

                        if (ballRect.intersects(brickRect)) {
                            map.setBrickValue(0, i, j);
                            score += 5;
                            totalBricks--;

                            if (ballposX + 19 <= brickRect.x || ballposX + 1 >= brickRect.x + brickRect.width) {
                                ballXdir = -ballXdir;
                            } else {
                                ballYdir = -ballYdir;
                            }

                            break A;
                        }
                    }
                }
            }
            ballposX += ballXdir;
            ballposY += ballYdir;

            if (ballposX < 0) {
                ballXdir = -ballXdir;
            }
            if (ballposY < 0) {
                ballYdir = -ballYdir;
            }
            if (ballposX > 670) {
                ballXdir = -ballXdir;
            }

            repaint();
        }
    }

    public void moveRight() {
        play = true;
        playerX += 30;
    }

    public void moveLeft() {
        play = true;
        playerX -= 40;
    }
}
